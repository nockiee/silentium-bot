import disnake
from disnake.ext import commands
from config import ADMIN_ROLES, ANNOUNCEMENT_CHANNEL, IMAGE_UPLOAD_CHANNEL
from datetime import datetime
import logging
from typing import Dict, Optional

logger = logging.getLogger(__name__)

class AdminPosts(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.post_data: Dict[int, dict] = {}
        self.scheduled_posts: Dict[int, dict] = {}
        self.edit_mode: Dict[int, dict] = {}

    async def is_admin(self, inter: disnake.Interaction) -> bool:
        return any(role.id in ADMIN_ROLES for role in inter.author.roles)

    @commands.slash_command(name="admin_post", description="–°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Å—Ç")
    async def admin_post(self, inter: disnake.ApplicationCommandInteraction):
        if not await self.is_admin(inter):
            return await inter.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", ephemeral=True)

        self.post_data[inter.author.id] = {
            "author_name": inter.author.display_name,
            "title": None,
            "content": None,
            "image_url": None,
            "waiting_for_image": False
        }

        await inter.response.send_modal(
            title="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Å—Ç",
            custom_id="admin_post_modal",
            components=[
                disnake.ui.TextInput(
                    label="–ó–∞–≥–æ–ª–æ–≤–æ–∫",
                    custom_id="title",
                    style=disnake.TextInputStyle.short,
                    required=True,
                    max_length=100
                ),
                disnake.ui.TextInput(
                    label="–¢–µ–∫—Å—Ç",
                    custom_id="content",
                    style=disnake.TextInputStyle.paragraph,
                    required=True,
                    max_length=2000
                )
            ]
        )

    @commands.slash_command(name="edit_post", description="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç")
    async def edit_post(
        self, 
        inter: disnake.ApplicationCommandInteraction,
        message_id: str,
        edit_type: str = commands.Param(choices=["—Ç–µ–∫—Å—Ç", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"])
    ):
        try:
            if not await self.is_admin(inter):
                await inter.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", ephemeral=True)
                return

            if edit_type != "—Ç–µ–∫—Å—Ç":
                await inter.response.defer(ephemeral=True)

            channel = self.bot.get_channel(ANNOUNCEMENT_CHANNEL)
            message = await channel.fetch_message(int(message_id))
            
            if not message or not message.embeds:
                if edit_type == "—Ç–µ–∫—Å—Ç":
                    await inter.response.send_message(
                        "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!",
                        ephemeral=True
                    )
                else:
                    await inter.followup.send(
                        "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!",
                        ephemeral=True
                    )
                return

            self.edit_mode[inter.author.id] = {
                "message_id": message.id,
                "edit_type": edit_type,
                "current_embed": message.embeds[0]
            }

            if edit_type == "—Ç–µ–∫—Å—Ç":
                await inter.response.send_modal(
                    title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞",
                    custom_id="edit_post_modal",
                    components=[
                        disnake.ui.TextInput(
                            label="–ó–∞–≥–æ–ª–æ–≤–æ–∫",
                            custom_id="title",
                            style=disnake.TextInputStyle.short,
                            required=True,
                            max_length=100,
                            value=message.embeds[0].title
                        ),
                        disnake.ui.TextInput(
                            label="–¢–µ–∫—Å—Ç",
                            custom_id="content",
                            style=disnake.TextInputStyle.paragraph,
                            required=True,
                            max_length=2000,
                            value=message.embeds[0].description
                        )
                    ]
                )
            else:
                self.edit_mode[inter.author.id]["waiting_for_image"] = True
                await inter.followup.send(
                    "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç):",
                    ephemeral=True
                )

        except ValueError:
            if edit_type == "—Ç–µ–∫—Å—Ç":
                await inter.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è!", ephemeral=True)
            else:
                await inter.followup.send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è!", ephemeral=True)
        except Exception as e:
            logger.error(f"Edit post error: {e}", exc_info=True)
            if edit_type == "—Ç–µ–∫—Å—Ç":
                await inter.response.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞", ephemeral=True)
            else:
                await inter.followup.send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞", ephemeral=True)

    @commands.Cog.listener()
    async def on_modal_submit(self, inter: disnake.ModalInteraction):
        await inter.response.defer(ephemeral=True)
        
        if inter.custom_id == "admin_post_modal":
            if inter.author.id not in self.post_data:
                return await inter.followup.send("‚ùå –°–µ—Å—Å–∏—è —É—Ç–µ—Ä—è–Ω–∞", ephemeral=True)

            self.post_data[inter.author.id].update({
                "title": inter.text_values["title"],
                "content": inter.text_values["content"]
            })

            view = disnake.ui.View(timeout=300)
            view.add_item(disnake.ui.Button(
                label="–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                style=disnake.ButtonStyle.green,
                custom_id="add_image",
                emoji="üñºÔ∏è"
            ))
            view.add_item(disnake.ui.Button(
                label="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                style=disnake.ButtonStyle.gray,
                custom_id="skip_image",
                emoji="‚è≠Ô∏è"
            ))

            await inter.followup.send(
                "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –ø–æ—Å—Ç—É?",
                view=view,
                ephemeral=True
            )

        elif inter.custom_id == "edit_post_modal":
            if inter.author.id not in self.edit_mode:
                return await inter.send("‚ùå –°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ç–µ—Ä—è–Ω–∞", ephemeral=True)

            edit_data = self.edit_mode[inter.author.id]
            channel = self.bot.get_channel(ANNOUNCEMENT_CHANNEL)
            message = await channel.fetch_message(edit_data["message_id"])

            if not message:
                return await inter.send("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", ephemeral=True)

            embed = edit_data["current_embed"]
            embed.title = inter.text_values["title"]
            embed.description = inter.text_values["content"]

            try:
                await message.edit(embed=embed)
                await inter.response.send_message("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!", ephemeral=True)
                self.edit_mode.pop(inter.author.id, None)
            except Exception as e:
                logger.error(f"Edit post error: {e}", exc_info=True)
                await inter.response.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞", ephemeral=True)

    @commands.Cog.listener()
    async def on_button_click(self, inter: disnake.MessageInteraction):
        try:
            custom_id = inter.component.custom_id

            if custom_id == "add_image":
                if inter.author.id not in self.post_data:
                    return await inter.send("‚ùå –°–µ—Å—Å–∏—è —É—Ç–µ—Ä—è–Ω–∞", ephemeral=True)
                self.post_data[inter.author.id]["waiting_for_image"] = True
                await inter.response.send_message(
                    "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç (–≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç):",
                    ephemeral=True
                )

            elif custom_id == "skip_image":
                await self._show_ping_options(inter)

            elif custom_id in ("publish_everyone", "publish_here", "publish_none"):
                await self._publish_post(inter)

            elif custom_id == "publish_now":
                post = self.post_data.get(inter.author.id)
                if not post:
                    return await inter.send("‚ùå –°–µ—Å—Å–∏—è —É—Ç–µ—Ä—è–Ω–∞", ephemeral=True)
                await self._do_publish(inter, post)

            elif custom_id == "schedule_post":
                if inter.author.id not in self.post_data:
                    return await inter.send("‚ùå –°–µ—Å—Å–∏—è —É—Ç–µ—Ä—è–Ω–∞", ephemeral=True)
                self.scheduled_posts[inter.author.id] = self.post_data[inter.author.id]
                await inter.send("‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö!", ephemeral=True)
                self.post_data.pop(inter.author.id, None)

            elif custom_id.startswith("queue_"):
                action, uid = custom_id.split("_")[1:]
                uid = int(uid)
                
                if action == "publish":
                    post = self.scheduled_posts.get(uid)
                    if post:
                        await self._do_publish(inter, post)
                    else:
                        await inter.send("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏.", ephemeral=True)
                
                elif action == "cancel":
                    if self.scheduled_posts.pop(uid, None):
                        await inter.send("‚úÖ –ü–æ—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω.", ephemeral=True)
                    else:
                        await inter.send("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏.", ephemeral=True)
        except Exception as e:
            logger.error(f"Button click error: {e}", exc_info=True)
            await inter.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è", ephemeral=True)

    async def _validate_image(self, attachment: disnake.Attachment) -> bool:
        if not attachment.content_type:
            return attachment.filename.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.webp'))
        return attachment.content_type.startswith('image/')

    async def _save_image(self, attachment: disnake.Attachment) -> tuple[bool, str, str]:
        try:
            if attachment.size > 10 * 1024 * 1024:
                return False, "", "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 10MB)"

            if not await self._validate_image(attachment):
                return False, "", "‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (PNG, JPG, GIF, WEBP)"

            channel = self.bot.get_channel(IMAGE_UPLOAD_CHANNEL)
            if not channel:
                return False, "", "‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

            try:
                file = await attachment.to_file()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                return False, "", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞"

            try:
                uploaded = await channel.send(file=file)
                if not uploaded.attachments:
                    return False, "", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                return True, uploaded.attachments[0].url, ""
            except disnake.Forbidden:
                return False, "", "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –∫–∞–Ω–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                return False, "", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return False, "", "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

    @commands.Cog.listener()
    async def on_message(self, message: disnake.Message):
        try:
            if message.author.bot:
                return

            in_edit_mode = (
                message.author.id in self.edit_mode and 
                self.edit_mode[message.author.id].get("waiting_for_image")
            )
            
            in_create_mode = (
                message.author.id in self.post_data and 
                self.post_data[message.author.id].get("waiting_for_image")
            )

            if not (in_edit_mode or in_create_mode):
                return

            if not message.attachments:
                await message.channel.send(
                    content="‚ùå –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!",
                    delete_after=5
                )
                return

            success, image_url, error_message = await self._save_image(message.attachments[0])
            if not success:
                delete_after = 10 if message.attachments[0].size > 10 * 1024 * 1024 else 5
                await message.channel.send(
                    content=error_message,
                    delete_after=delete_after
                )
                return

            try:
                await message.delete()
            except:
                pass

            if in_edit_mode:
                try:
                    edit_data = self.edit_mode[message.author.id]
                    announcement_channel = self.bot.get_channel(ANNOUNCEMENT_CHANNEL)
                    target_message = await announcement_channel.fetch_message(edit_data["message_id"])
                    
                    embed = edit_data["current_embed"]
                    embed.set_image(url=image_url)
                    
                    await target_message.edit(embed=embed)
                    await message.channel.send(
                        content="‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                        delete_after=5
                    )
                    self.edit_mode.pop(message.author.id, None)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ—Å—Ç–µ: {e}")
                    await message.channel.send(
                        content="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞",
                        delete_after=5
                    )
                
            else:
                try:
                    self.post_data[message.author.id].update({
                        "image_url": image_url,
                        "waiting_for_image": False
                    })
                    await message.channel.send(
                        content="‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
                        delete_after=5
                    )
                    await self._show_ping_options(message)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –Ω–æ–≤–æ–º—É –ø–æ—Å—Ç—É: {e}")
                    await message.channel.send(
                        content="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞",
                        delete_after=5
                    )

        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}", exc_info=True)
            await message.channel.send(
                content="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞",
                delete_after=10
            )

    async def _show_ping_options(self, source: disnake.Message | disnake.MessageInteraction):
        post = self.post_data.get(source.author.id)
        if not post:
            return

        view = disnake.ui.View(timeout=300)
        view.add_item(disnake.ui.Button(
            label="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å @everyone",
            style=disnake.ButtonStyle.green,
            custom_id="publish_everyone"
        ))
        view.add_item(disnake.ui.Button(
            label="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å @here",
            style=disnake.ButtonStyle.blurple,
            custom_id="publish_here"
        ))
        view.add_item(disnake.ui.Button(
            label="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è",
            style=disnake.ButtonStyle.gray,
            custom_id="publish_none"
        ))

        if isinstance(source, disnake.MessageInteraction):
            if source.response.is_done():
                await source.followup.send(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
                    view=view,
                    ephemeral=True
                )
            else:
                await source.response.send_message(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
                    view=view,
                    ephemeral=True
                )
        else:
            await source.channel.send(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
                view=view,
                delete_after=300
            )

    async def _publish_post(self, inter: disnake.MessageInteraction):
        post = self.post_data.get(inter.author.id)
        if not post:
            return await inter.send("‚ùå –°–µ—Å—Å–∏—è —É—Ç–µ—Ä—è–Ω–∞", ephemeral=True)

        ping = {
            "publish_everyone": "@everyone",
            "publish_here": "@here",
            "publish_none": ""
        }.get(inter.component.custom_id, "")

        post["ping"] = ping
        self.post_data[inter.author.id] = post

        view = disnake.ui.View(timeout=300)
        view.add_item(disnake.ui.Button(
            label="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å",
            style=disnake.ButtonStyle.green,
            custom_id="publish_now"
        ))
        view.add_item(disnake.ui.Button(
            label="–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å",
            style=disnake.ButtonStyle.gray,
            custom_id="schedule_post"
        ))

        await inter.response.send_message(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            view=view,
            ephemeral=True
        )

    async def _do_publish(self, inter: disnake.MessageInteraction, post: dict):
        channel = self.bot.get_channel(ANNOUNCEMENT_CHANNEL)
        if not channel:
            return await inter.send("‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", ephemeral=True)

        embed = disnake.Embed(
            title=post["title"],
            description=post["content"],
            color=disnake.Color.green(),
            timestamp=datetime.now()
        )
        embed.set_footer(text=f"–ê–≤—Ç–æ—Ä: {post['author_name']}")
        if post.get("image_url"):
            embed.set_image(url=post["image_url"])

        try:
            await channel.send(post.get("ping", ""), embed=embed)
            await inter.send("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!", ephemeral=True)
        except Exception as e:
            logger.error(f"Publish error: {e}", exc_info=True)
            await inter.send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞", ephemeral=True)
        finally:
            self.post_data.pop(inter.author.id, None)
            self.scheduled_posts.pop(inter.author.id, None)

    @commands.slash_command(name="admin-queue", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
    async def admin_queue(self, inter: disnake.ApplicationCommandInteraction):
        if not await self.is_admin(inter):
            return await inter.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", ephemeral=True)

        if not self.scheduled_posts:
            return await inter.send("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.", ephemeral=True)

        embed = disnake.Embed(title="–û—á–µ—Ä–µ–¥—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤", color=disnake.Color.blurple())
        for uid, post in self.scheduled_posts.items():
            embed.add_field(
                name=f"{post['title']} (–ê–≤—Ç–æ—Ä: {post['author_name']})",
                value=f"–¢–µ–∫—Å—Ç: {post['content'][:100]}...\nID: {uid}",
                inline=False
            )

        view = disnake.ui.View(timeout=300)
        for uid in self.scheduled_posts:
            view.add_item(disnake.ui.Button(
                label=f"–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å {uid}",
                style=disnake.ButtonStyle.green,
                custom_id=f"queue_publish_{uid}"
            ))
            view.add_item(disnake.ui.Button(
                label=f"–û—Ç–º–µ–Ω–∏—Ç—å {uid}",
                style=disnake.ButtonStyle.red,
                custom_id=f"queue_cancel_{uid}"
            ))

        await inter.send(embed=embed, view=view, ephemeral=True)



def setup(bot):
    bot.add_cog(AdminPosts(bot))